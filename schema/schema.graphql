schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

enum EmailCategory @aws_cognito_user_pools{
  WORK
  PERSONAL
  PROMOTIONS
  OTHER
}

enum Sentiment @aws_cognito_user_pools{
  POSITIVE
  NEGATIVE
  NEUTRAL
  MIXED
}

enum UserStatus @aws_cognito_user_pools{
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

type Attachment @aws_cognito_user_pools{
  key: ID!
  fileName: String
  contentType: String
  size: Int
  url: String
}
input AttachmentInput @aws_cognito_user_pools{
  key: ID!
  fileName: String
  contentType: String
  size: Int
  url: String
}

type Email @aws_cognito_user_pools{
  emailId: ID!
  userId: ID!
  from: String!
  to: [String!]!
  cc: [String!]
  subject: String
  receivedTimestamp: AWSDateTime!
  snippet: String
  summary: String
  category: EmailCategory
  sentiment: Sentiment
  attachments: [Attachment]
  read: Boolean!
}

input EmailInput @aws_cognito_user_pools{

  userId: ID!
  from: String!
  to: [String!]!
  cc: [String!]
  subject: String
  receivedTimestamp: AWSDateTime!
  snippet: String
  summary: String
  category: EmailCategory
  sentiment: Sentiment
  attachments: [AttachmentInput]
  read: Boolean!
}

type EmailConnection @aws_cognito_user_pools{
  items: [Email!]!
  nextToken: String
}

type User @aws_cognito_user_pools{
  id: ID!
  email: String!
  userId: String!
  firstName: String!
  lastName: String!
  createdAt: AWSDateTime
  updatedAt: AWSDateTime
  lastLogin: AWSDateTime
  status: UserStatus
}

input CreateUserInput @aws_cognito_user_pools{
  email: String!
  firstName: String!
  lastName: String!
  status: UserStatus
}

input ListEmailsInput @aws_cognito_user_pools {
  limit: Int
  nextToken: String
}

input ListByCategoryInput @aws_cognito_user_pools{
  category: EmailCategory!
  limit: Int
  nextToken: String
}

input ListBySentimentInput @aws_cognito_user_pools{
  sentiment: Sentiment!
  limit: Int
  nextToken: String
}

type Query {
  listEmails(input: ListEmailsInput): EmailConnection @aws_cognito_user_pools
  getEmail(emailId: ID!): Email @aws_cognito_user_pools
  listEmailsByCategory(input: ListByCategoryInput): EmailConnection @aws_cognito_user_pools
  listEmailsBySentiment(input: ListBySentimentInput): EmailConnection @aws_cognito_user_pools
  getUser(userId: ID!): User @aws_cognito_user_pools
}

type Mutation {
  createUser(input: CreateUserInput!): String! @aws_cognito_user_pools
  markAsRead(emailId: ID!): Email @aws_cognito_user_pools
  deleteEmail(emailId: ID!): Email @aws_cognito_user_pools
  notifyNewEmail(userId: ID!, email: EmailInput!): Email @aws_cognito_user_pools
}

type Subscription {
  onNewEmail(userId: ID!): Email
    @aws_subscribe(mutations: ["notifyNewEmail"])
}
